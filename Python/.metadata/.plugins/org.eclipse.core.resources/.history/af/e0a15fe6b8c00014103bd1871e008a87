'''
Included all connections in the file again for quick importation into projects
'''
from connection import Connection
import math
class RPROP(Connection):
    def __init__(self, anteriorNeuron, posteriorNeuron):
        super(RPROP, self).__init__(anteriorNeuron, posteriorNeuron)
        self.lastGradient = 0
        self.lastStep = 0
        self.step = RPROP.stepInitial
    def updateWeight(self, learningParameters):
        comparison = self.lastGradient*self.getGradient()
        deltaWeight = -math.copysign(self.step, self.getGradient())
        if(comparison > 0):
            self.step = min(self.lastStep*RPROP.stepIncrease, RPROP.stepMax)
            self.weight += deltaWeight
            self.lastGradient = self.getGradient()
        elif (comparison < 0):
            self.step = max(self.lastStep*RPROP.stepDecrease, RPROP.stepMin)
            self.lastGradient = 0
        elif (comparison == 0):
            self.weight += deltaWeight
            self.lastGradient = self.getGradient()
        self.lastStep = self.step

    def learningParameterCount(self):
        return 0
class ALRConnection(Connection):
    def __init__(self, anteriorNeuron, posteriorNeuron):
        super(RPROP, self).__init__(anteriorNeuron, posteriorNeuron)
        self.lastGradient = 0
        self.lastStep = 0
        self.step = RPROP.stepInitial
    def updateWeight(self, learningParameters):
        comparison = self.lastGradient*self.getGradient()
        deltaWeight = -math.copysign(self.step, self.getGradient())
        if(comparison > 0):
            self.step = min(self.lastStep*RPROP.stepIncrease, RPROP.stepMax)
            self.weight += deltaWeight
            self.lastGradient = self.getGradient()
        elif (comparison < 0):
            self.step = max(self.lastStep*RPROP.stepDecrease, RPROP.stepMin)
            self.lastGradient = 0
        elif (comparison == 0):
            self.weight += deltaWeight
            self.lastGradient = self.getGradient()
        self.lastStep = self.step
            